# Note: Some settings are set in DefaultConfiguration.conf. But the code looks HERE first, and only
# if a setting doesn't exist will it try to look for it in DefaultConfiguration.conf.
# For the purposes of this file, everything is roughly self-contained.

# This file is parsed using ROOT TEnv - see the documentation.
# Specific classes are parsed using code that lives in python/PyHelpers.py. See that file for details.

# The c++ code needs to know how to match MC DSIDs with sample names. So go to config/Samples.txt
# and look up what "SAMPLE_NAME" of your dsid set you want. The samples 205048-56 are labeled as
# mc12_c1n2_lepW, so in this configuration we want those DSIDs to be labeled as "susy". So we write:
Sample.susy: mc12_c1n2_lepW
# Here are some other examples. See Sample.h/cxx for a list of samples.
# mc12 refers to MC12JobOptions (see https://svnweb.cern.ch/trac/atlasoff/browser/Generators/MC12JobOptions/trunk/share/)
# mc15 refers to MC15JobOptions (see https://svnweb.cern.ch/trac/atlasoff/browser/Generators/MC15JobOptions/trunk/share/)
Sample.wje:   mc15_wjet_sherpa_e
Sample.wjm:   mc15_wjet_sherpa_m
Sample.wjt:   mc15_wjet_sherpa_t
# Note that there is a distinction between "non-overlapping" and "overlapping" samples. In the conf
# file, when you specify e.g. Sample.wje you only want to do so for non-overlapping samples. But
# sometimes you will want to plot all wjet together, so for instance in PassEvent.Samples you can
# specify "wjet" and it will know to add wje+wjm+wjt in that histogram.

# A note about fullsim/atlfast ambiguities:
# The code will know automatically if a sample is fullsim or atlfast from the MapSRM. BUT if two
# versions exist for the same dataset (fullsim and atlfast), then the code will complain that you
# need to resolve the ambiguity by appending "-a" or "-s" at the end of the dataset group name. This
# also means that you cannot mix fullsim and atlfast in teh same dataset group 
# (just make 2 groups if you need to). So for example this will specify the atlfast version of Zll:
Sample.zjee: mc12_Zll_Powheg-a

# You are going to define 3 PassEvent classes, but you only want to run over two of them (the SR
# and the eventcleaning). So you leave "CR" out of the Instances.
PassEvent.Instances: eventcleaning SR

# You want to set some generic settings for your PassEvent classes.
# Note that "wjet" will be the combination of wje+wjm+wjt. See Sample.cxx.
PassEvent.Samples: susy wje wjm wjt wjet
# "all" will be included by default, no need to specify here.

# You need to define your 3 PassEvent classes, using cuts that you also need to define.
PassEvent.eventcleaning.Cuts: CutGRL CutPassLarError
PassEvent.SR.Cuts: CutSignalLeptons3 CutMet50
PassEvent.CR.Cuts: CutSignalLeptons3 CutMetLt50
# You want SR and CR to pick up where eventcleaning left off in the cutflow. So you specify:
PassEvent.SR.ParentEventSelectorName: eventcleaning
PassEvent.CR.ParentEventSelectorName: eventcleaning

# For eventcleaning class, you don't want to print out histograms for separate samples. So you set
# the following, which will only apply to the cleaning3l class:
PassEvent.eventcleaning.Samples: all

# If you want to only plot a few variables in PassEvent, or you want to turn off specific ones:
# PassEvent.Variables: GRL MTW
# PassEvent.LepVariables: lepPt
# PassEvent.SkipVariables: GRL

# You made reference to some cuts, so make sure you define them. They must begin with the letters 
# "Cut", such as CutThis or CutThat.
# The list of variables you have at your disposal is in Variables.cxx.
# How the variables are defined is in the function "GetEventVariable" in xAODWrapper.cxx.
CutGRL: GRL == 1
CutPassLarError: passLarError == 1
CutSignalLeptons3: nSignalLeptons == 3
CutMet50: met_Et > 50
CutMetLt50: met_Et < 50

# Here are some other cut examples. They won't be used in this example, since none of the PassEvent
# instances ask for them.
CutChannelaa: 3<ChanFlavor && ChanFlavor<7
CutChannelee: ChanFlavor==4
CutChanneleu: ChanFlavor==5
CutChanneluu: ChanFlavor==6
CutChannelll: CutChannelee || CutChanneluu
# Note the syntax of the last one, CutChannelll. It combines two previously defined CutItems and does
# an OR of them. In the c++ code this is referred to as "Comparing SubCut Items"

#
# Below is the way to set up some of the job-wide options controlled by the EDM (xAODWrapper) :
#
# Triggers: Specify a list, or "all" if you want all triggers to be evaluated.
EDM.trigger_bitmask: HLT_e24_lhmedium_iloose HLT_e28_lhtight_iloose HLT_e60_lhmedium
# luminosity measured in pb. Default is 10000. (10 fb-1). check if it matches the GRL you are using
EDM.luminosity_pb: 10000.
# GRL file. The code looks in $ROOTCOREBIN/../* and $ROOTCOREDIR/../* based on what you supply below.
EDM.grlfile: pennSoftLepton/data/data15_13TeV.periodA1_DetStatus-v62-pro17_DQDefects-00-01-02_PHYS_CombinedPerf_Tracking_Tracking.xml
# pile-up reweighting file for data obtained using ilumicalc. the file is generated using a GRL so make sure they match!
EDM.prwLcalcFiles: pennSoftLepton/data/ilumicalc_histograms_None_267073-271421.root
# pile-up re-weighting files for MC, let's use a generic one for now
EDM.prwConfFiles: dev/PileupReweighting/mc15a_defaults.NotRecommended.prw.root
# pile-up mu rescaling value, the actual rescaling applied is 1.0/pu_rescaling
#EDM.pu_rescaling: 1.0

#
# Below this line, everything is OPTIONAL. The things above the line are fairly essential to set up
# your job.
#

# Since you are using xAODs, your job will automatically have SUSYObjDefAlg scheduled to run. It has
# defaults which are intended to match SUSYTools defaults, but if you want to speficy your own
# configurables you can do so here.
SUSYObjDefAlg.susytools_alg.do_overlapremove:  1.
SUSYObjDefAlg.susytools_alg.ele_ptmin:         7.     
SUSYObjDefAlg.susytools_alg.mu_ptmin:          6.     

#
# Isolation cuts are configured SUSYObjDefAlg. You can either set an ele_isowp (the working points set
# up by the Isolation Forum, https://twiki.cern.ch/twiki/bin/viewauth/AtlasProtected/IsolationForum)
# or by cuts on the traditional variables, as described in pennSoftLepton/Variables.h (see the AnaIso
# enum), by setting 
# ele_trkisotype and ele_caloisotype in SUSYObjDefAlg. If you set an ele_isowp, then you must set 
# the ele_trk(calo)isotype to None, since the isowp working points are defined for both track and calo
# isolation.
# If you are not using an isowp, then you must also set the cuts for the trkiso and caloiso variables.
# This is done via ele_trkiso_max and ele_caloiso_max.
# Your choice of isolation type will propagate to xAODWrapper, so that xAODWrapper broadcasts that
# type of isolation variable to other algorithms.
# Additionally, Ntupler will save all isolation variables if you tell it to.
#
# Below as an example: I use the GradientLoose wp for electrons, and etcone30overPt, ptcone30overPt
# for muons.
SUSYObjDefAlg.susytools_alg.ele_isowp:           GradientLoose
SUSYObjDefAlg.susytools_alg.ele_trkisotype:      None
SUSYObjDefAlg.susytools_alg.ele_caloisotype:     None

SUSYObjDefAlg.susytools_alg.mu_isowp:            None
SUSYObjDefAlg.susytools_alg.mu_trkisotype:       ptcone30overPt
SUSYObjDefAlg.susytools_alg.mu_caloisotype:      etcone30overPt
SUSYObjDefAlg.susytools_alg.mu_trkiso_max:       0.16
SUSYObjDefAlg.susytools_alg.mu_caloiso_max:      0.20

# Say you want to make an output ntuple. All you need to do is specify "--ntuple" in the command line.
# You don't need to do anything here.
# By default the Ntupler class does not do any preselection. But if you specify a
# Parent event selector (a PassEvent class), it will preselect based on the result of that instance's
# cutflow.
Ntupler.ParentEventSelectorName: SR

# Some more Ntupler options.
# Note: Please do NOT use Ntupler.Variables and Ntupler.SkipVariables at the same time, because it
# does not make sense and has unspecified consequences.
# Specify variables to skip:
Ntupler.SkipVariables: GRL passLarError passTileError passCoreBit passPrimaryVtx passCosmicMuon
+Ntupler.SkipVariables: passTileTripReader passIncompleteEvents passTileCalHotSpot passBadJet
+Ntupler.SkipVariables: passCaloJet passBadMuon passHFOR passMCOverlap passBCH MuIsValid
# Specify variables to keep:
#Ntupler.Variables: GRL passLarError passTileError
# DoTriggers is true by default
Ntupler.DoTriggers: 0.
# DoLeptonID is true by default
Ntupler.DoLeptonID: 0.
